MODULE main
VAR
    -- Estado do botão
    button : {UP, DOWN};
    -- Fase do trem de aterragem
    phase : {movingup, movingdown, haltup, haltdown};
    -- Estado das portas
    dstate : {CLOSED, OPEN};
    -- Estado do trinco
    lstate : {LOCKED, UNLOCKED};
    -- O estado de todo o processo. O estado avança geralmente neste sentido, complete -> unlock -> open -> retracting/extending -> close -> lock -> complete
    -- Na estado unlock, deve-se destrancar o trinco
    -- Na estado open, deve-se abrir as portas
    -- No estado gear, deve iniciar o processo de retracting ou extending da engrenagem
    -- Na estado close, deve-se fechar as portas
    -- Na estado lock, deve-se trancar o trinco
    -- Na estado complete, deve-se sorrir porque o processo de extensão/retração ficou concluido com sucesso
    state : {unlock, open, gear, close, lock, complete};
    -- Estado da engrenagem
    gstate : { RETRACTED, EXTENDED, RETRACTING, EXTENDING};
IVAR
    -- Botão pressionado pelo piloto, este pode optar por pressiona-lo a qualquer instante.
    press : {UP, DOWN};
ASSIGN
    -- Atribuir o estado inicial
    init(button) := DOWN;
    init(phase) := haltdown;
    init(dstate) := CLOSED;
    init(lstate) := LOCKED;
    init(state) := complete;
    init(gstate) := RETRACTED;
    -- O botão pressionado é exatamente o botão que o piloto pressiona.
    next(button) := press;
    -- A fase altera para movingup/movingdown assim que o piloto pressione um botão
    -- A fase finalmente muda para haltup/haltdown assim que o estado é "lock"
    next(phase) := case
                        state != gear & press = DOWN & button = UP : movingdown;
                        state != gear & press = UP & button = DOWN : movingup;
                        phase = movingup & state = lock : haltup;
                        phase = movingdown & state = lock : haltdown;
                        TRUE : phase;
                   esac;
    -- O estado das portas só altera quando o estado global está em "open" ou "close"
    next(dstate) := case
                        state = open : OPEN;
                        state = close : CLOSED;
                        TRUE : dstate;
                    esac;
    -- O lstate varia entre LOCKED e UNLOCKED.
    -- Se estivermos no estado de "lock", ele deve ser trancado, e no estado "unlock" destrancado.
    -- Mas temos a situação excecional de quando o estado é "complete" e o piloto pressiona um botão e, imediatamente a seguir, o oposto. Nessas situações,
    -- não devemos alterar o estado do trinco.
    next(lstate) := case
                        state != gear & phase = lock & press = button : LOCKED;
                        state != gear & phase = unlock & press = button : UNLOCKED;
                        TRUE : lstate;
                    esac;
    -- O estado, como foi dito anteriormente, vai no sentido complete -> unlock -> open -> retracting/extending -> close -> lock -> complete
    -- Mas temos de ter em atenção a situação excecional quando o estado é "complete" e o piloto pressiona um botão e, imediatamente a seguir, o oposto.
    -- Nessa situação, o estado vai de complete -> unlock -> lock -> complete
    next(state) := case
                        state = complete : unlock;
                        state = unlock : ((press != button) ?  lock : open);
                        state = open : gear;
                        state = gear & (dstate = EXTENDING | dstate = RETRACTING) : close;
                        state = close : lock;
                        state = lock : complete;
                        TRUE : state;
                    esac;
    -- O gstate varia em 2 momentos.
    -- O primeiro EXTENDED -> RETRACTING -> RETRACTED.
    -- O Segundo RETRACTED -> EXTENDING -> EXTENDED.
    -- O state define quando existem movimentos a efetuar
    next(gstate) := case
                        state = gear & dstate = OPEN & gstate = EXTENDED   : RETRACTING;
                        state = gear & dstate = OPEN & gstate = RETRACTING : RETRACTED;
                        state = gear & dstate = OPEN & gstate = RETRACTED  : EXTENDING;
                        state = gear & dstate = OPEN & gstate = EXTENDING  : EXTENDED;
                        TRUE : gstate;
                    esac;
DEFINE
    goal := phase = movingup -> button = UP &
            phase = movingdown -> button = DOWN &
            button = UP -> phase = movingup | phase = haltup &
            button = DOWN -> phase = movingdown | phase = haltdown &
            dstate = OPEN -> lstate = UNLOCKED &
            dstate = CLOSED -> lstate = LOCKED &
            dstate = CLOSED & gstate != RETRACTED -> gstate = EXTENDED &
            dstate = CLOSED & gstate != EXTENDED -> gstate = RETRACTED &
            gstate != RETRACTED & gstate != EXTENDED -> dstate = OPEN &
            dstate = CLOSED -> gstate != RETRACTING & gstate != EXTENDING
            ;
CTLSPEC
    AG goal
Add Comment Collapse
